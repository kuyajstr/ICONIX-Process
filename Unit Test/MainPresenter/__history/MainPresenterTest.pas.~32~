unit MainPresenterTest;

interface

uses
  DUnitX.TestFramework,
  ViewIntf,
  MainRestService,
  ViewFactory,
  Generics.Collections;

type
  [TestFixture]
  TMainPresenterTest = class
  private
    FView: IMainView;
    FRestService: IMainRestService;
    FViewFactory: IViewFactory;
    FBookList: TList<TObject>;
  public
    [Setup]
    procedure Setup;
    [TearDown]
    procedure TearDown;

//    [Test]
    procedure LoadBooks_SuccessfullyRetrieveBooks_BookCountIsNotZero;
//    [Test]
    procedure LoadBooks_SuccessfullyRetrieveBooks_BookCountShouldBeThree;

//    [Test]
    procedure LoadBooks_NoBooksFound_ShowMessageMatchErrorMessage;

//    [Test]
    procedure ShowBookDetails_SucessfullyRetrieveFirstBook_ShouldMatchBookName;
  end;

implementation

uses
  MainPresenter,
  MainViewStub,
  MainRestServiceStub,
  SysUtils,
  ViewFactoryStub,
  Book;

procedure TMainPresenterTest.LoadBooks_NoBooksFound_ShowMessageMatchErrorMessage;
var
  ErrorMsg: string;
begin
  //Arrange
  var Books := TList<TObject>.Create;
  var MainRestService := TMainRestServiceStub.Create(Books);

  var MainPresenter := TMainPresenter.Create(FView, MainRestService, FViewFactory);

  // Act
  try
    MainPresenter.LoadBooks;
  except
    on E: Exception do
      ErrorMsg := E.Message;
  end;

  // Assert
  Assert.AreEqual(ErrorMsg, 'No Record Found');
end;

procedure TMainPresenterTest.LoadBooks_SuccessfullyRetrieveBooks_BookCountIsNotZero;
begin
  //Arrange
  var MainRestService := TMainRestServiceStub.Create(FBookList);
  var MainPresenter := TMainPresenter.Create(FView, MainRestService, FViewFactory);

  // Act
  MainPresenter.LoadBooks;
  var RetrievedBooks := MainPresenter.GetBookList;

  // Assert
  Assert.AreNotEqual(0, RetrievedBooks.Count);
end;

procedure TMainPresenterTest.LoadBooks_SuccessfullyRetrieveBooks_BookCountShouldBeThree;
begin
  //Arrange
  var MainRestService := TMainRestServiceStub.Create(FBookList);
  var MainPresenter := TMainPresenter.Create(FView, MainRestService, FViewFactory);

  // Act
  MainPresenter.LoadBooks;
  var RetrievedBooks := MainPresenter.GetBookList;

  // Assert
  Assert.AreEqual(3, RetrievedBooks.Count);
end;



procedure TMainPresenterTest.ShowBookDetails_SucessfullyRetrieveFirstBook_ShouldMatchBookName;
var
  ErrorMsg: string;
begin
  //Arrange
  var MainRestService := TMainRestServiceStub.Create(FBookList);
  var MainPresenter := TMainPresenter.Create(FView, MainRestService,
    FViewFactory);


  // Act

//  var SelectedBook := FView.GetSelectedBook as TBook;

  // Assert
//  Assert.AreEqual('Book C', SelectedBook.Title);
end;

procedure TMainPresenterTest.Setup;
begin
  FViewFactory := TViewFactoryStub.Create;
  FView := FViewFactory.CreateMainView(nil);

  FBookList := TList<TObject>.Create;
  FBookList.AddRange([
    TBook.Create('Book A', 'Book A Synopsis', 1),
    TBook.Create('Book B', 'Book B Synopsis', 2),
    TBook.Create('Book C', 'Book C Synopsis', 3)
  ]);
end;

procedure TMainPresenterTest.TearDown;
begin
  FView := nil;
  FRestService := nil;
  FViewFactory := nil;
end;

initialization
  TDUnitX.RegisterTestFixture(TMainPresenterTest);

end.
