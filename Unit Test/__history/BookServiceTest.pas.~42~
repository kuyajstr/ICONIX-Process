unit BookServiceTest;

interface

uses
  DUnitX.TestFramework;

type

  [TestFixture]
  TBookServiceTest = class
  public
    [Test]
    procedure Select_SucessfullyRetrieveBook_True;

    [Test]
    procedure Insert_TitleIsEmpty_RaiseException;
    [Test]
    procedure Insert_SynopsisIsEmpty_RaiseException;
    [Test]
    procedure Insert_SuccessfullyInsert_WillNotRaiseException;

    [Test]
    [TestCase('Zero ID', '0')]
    [TestCase('Negative ID', '-1')]
    [TestCase('Exceeding ID', '100')]
    procedure GetBook_InvalidIdRange_RaiseException(const ID: Integer);

    [Test]
    [TestCase('Zero ID Message', '0,Invalid ID')]
    [TestCase('Negative ID Message', '-1,Invalid ID')]
    [TestCase('Exceeding ID Message', '100,ID Out of bound')]
    procedure Insert_MatchingErrorMessage_True(const ID: Integer; const ErrorStr: string);

    [Test]
    procedure GetAllBooks_DatabaseHasData_True;
    [Test]
    procedure GetAllBooks_DataBaseIsEmpty_True;
  end;

implementation

uses
  TestBookDao, BookService, Book, SysUtils, Generics.Collections;

procedure TBookServiceTest.GetAllBooks_DatabaseHasData_True;
var
  BookList: TObjectList<TBook>;
begin
  // Arrange
  BookList := TObjectList<TBook>.Create;
  var DB := TDictionary<Integer, TBook>.Create;
  DB.Add(1, TBook.Create('Book A', 'Synopsis for Book A', 1));
  DB.Add(2, TBook.Create('Book B', 'Synopsis for Book B', 2));
  DB.Add(3, TBook.Create('Book C', 'Synopsis for Book C', 3));
  var BookDao := TTestBookDao.Create(DB);
  var Service := TBookService.Create(BookDao);

  // Act
  Service.GetAllBooks(BookList);

  // Assert
  Assert.IsTrue(BookList.Count > 0);
end;

procedure TBookServiceTest.GetAllBooks_DataBaseIsEmpty_True;
var
  BookList: TObjectList<TBook>;
begin
  // Arrange
  BookList := TObjectList<TBook>.Create;
  var DB := TDictionary<Integer, TBook>.Create;
  var BookDao := TTestBookDao.Create(DB);
  var Service := TBookService.Create(BookDao);

  // Act
  Service.GetAllBooks(BookList);

  // Assert
  Assert.AreEqual(BookList.Count, 0);
end;

procedure TBookServiceTest.GetBook_InvalidIdRange_RaiseException(
  const ID: Integer);
var
  BookList: TObjectList<TBook>;
  Book: TBook;
begin
  // Arrange
  BookList := TObjectList<TBook>.Create;
  var DB := TDictionary<Integer, TBook>.Create;
  DB.Add(1, TBook.Create('Book A', 'Synopsis for Book A', 1));
  DB.Add(2, TBook.Create('Book B', 'Synopsis for Book B', 2));
  DB.Add(3, TBook.Create('Book C', 'Synopsis for Book C', 3));
  var BookDao := TTestBookDao.Create(DB);
  var Service := TBookService.Create(BookDao);

  //Assert
  Assert.WillRaiseAny(procedure
  begin
    Service.GetBook(ID, Book);
  end);
end;

procedure TBookServiceTest.Insert_MatchingErrorMessage_True(const ID: Integer;
  const ErrorStr: string);
var
  Book: TBook;
  ErrorMsg: string;
begin
  // Arrange
  var DB := TDictionary<Integer, TBook>.Create;
  DB.Add(1, TBook.Create('Book A', 'Synopsis for Book A', 1));
  DB.Add(2, TBook.Create('Book B', 'Synopsis for Book B', 2));
  DB.Add(3, TBook.Create('Book C', 'Synopsis for Book C', 3));
  var BookDao := TTestBookDao.Create(DB);
  var Service := TBookService.Create(BookDao);

  //Act
  try
    Service.GetBook(ID, Book);
  except on E: Exception do
    ErrorMsg := E.Message;
  end;

  //Assert
  Assert.AreEqual(ErrorStr, ErrorMsg);
end;

procedure TBookServiceTest.Insert_SuccessfullyInsert_WillNotRaiseException;
begin
    // Arrange
  var DB := TDictionary<Integer, TBook>.Create;
  var BookDao := TTestBookDao.Create(DB);
  var Service := TBookService.Create(BookDao);

  var Book := TBook.Create('Title Test','Synopsis Test',1);

  //Assert
  Assert.WillNotRaiseAny(procedure
  begin
    Service.CreateBook(Book);
  end);
end;

procedure TBookServiceTest.Insert_SynopsisIsEmpty_RaiseException;
begin
  // Arrange
  var DB := TDictionary<Integer, TBook>.Create;
  var BookDao := TTestBookDao.Create(DB);
  var Service := TBookService.Create(BookDao);

  var Book := TBook.Create('Title Test','',1);

  //Assert
  Assert.WillRaiseAny(procedure
  begin
    Service.CreateBook(Book);
  end);
end;

procedure TBookServiceTest.Insert_TitleIsEmpty_RaiseException;
begin
  // Arrange
  var DB := TDictionary<Integer, TBook>.Create;
  var BookDao := TTestBookDao.Create(DB);
  var Service := TBookService.Create(BookDao);

  var Book := TBook.Create('','Synopsis Test',1);

  //Assert
  Assert.WillRaiseAny(procedure
  begin
    Service.CreateBook(Book);
  end);
end;


procedure TBookServiceTest.Select_SucessfullyRetrieveBook_True;
var
  Book: TBook;
begin
  // Arrange
  var DB := TDictionary<Integer, TBook>.Create;
  var ExpectedBook := TBook.Create('Book A', 'Synopsis for Book A', 1);
  DB.Add(1, ExpectedBook);
  DB.Add(2, TBook.Create('Book B', 'Synopsis for Book B', 2));
  DB.Add(3, TBook.Create('Book C', 'Synopsis for Book C', 3));
  var BookDao := TTestBookDao.Create(DB);
  var Service := TBookService.Create(BookDao);

  //Act
  Service.GetBook(1, Book);

  //Assert
  Assert.AreEqual(ExpectedBook, Book);
end;

initialization

TDUnitX.RegisterTestFixture(TBookServiceTest);

end.
