unit BookController;

interface

uses
  MVCFramework,
  MVCFramework.Commons,
  MVCFramework.Serializer.Commons,
  Book,
  BookService;

type

  [MVCPath('/api/books')]
  TBookController = class(TMVCController)
  private
    FService: TBookService;
  public
    constructor Create (const Service: TBookService);

    [MVCPath]
    [MVCHTTPMethod([httpPOST])]
    [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
    procedure CreateBook();

    [MVCPath]
    [MVCHTTPMethod([httpGET])]
    [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
    procedure GetAllBooks();

    [MVCPath('/($ID)')]
    [MVCHTTPMethod([httpGET])]
    [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
    procedure GetBookByID(const ID: Integer);

    [MVCPath('/($ID)')]
    [MVCHTTPMethod([httpDELETE])]
    [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
    procedure DeleteBook(const ID: Integer);

    [MVCPath('/($ID)')]
    [MVCHTTPMethod([httpPUT])]
    [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
    procedure UpdateBook(const ID: Integer);
  end;

implementation

uses
  SysUtils;

{ TBookController }

constructor TBookController.Create(const Service: TBookService);
begin
  if not assigned(Service) then
    raise EArgumentNilException.Create('Book Service is nill');

  inherited Create;
  FService := Service;
end;

procedure TBookController.CreateBook;
begin


end;

procedure TBookController.DeleteBook(const ID: Integer);
begin

end;

procedure TBookController.GetAllBooks;
begin

end;

procedure TBookController.GetBookByID(const ID: Integer);
begin

end;

procedure TBookController.UpdateBook(const ID: Integer);
begin

end;

end.
