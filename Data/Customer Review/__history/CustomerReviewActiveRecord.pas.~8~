unit CustomerReviewActiveRecord;

interface

uses
  EntityActiveRecord,
  CustomerReviewContext,
  CustomerReview;

type

  [MVCNameCase(ncPascalCase)]
  [MVCTable('customer_review')]
  TCustomerReviewActiveRecord = class(TEntityActiveRecord,
    ICustomerReviewContext)
  private
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    FId: Integer;
    [MVCTableField('BOOK_ID')]
    FBookId: Integer;
    [MVCTableField('CUSTOMER_ID')]
    FCustomerId: Integer;
    [MVCTableField('REVIEW')]
    FReview: string;
    [MVCTableField('RATING')]
    FRating: Integer;
    [MVCTableField('IS_PENDING')]
    FIsPending: Boolean;

    function GetId: Integer;
    procedure SetId(const AId: Integer);
    function GetBookId: Integer;
    procedure SetBookId(const ABookId: Integer);
    function GetCustomerId: Integer;
    procedure SetCustomerId(const ACustomerId: Integer);
    function GetReview: string;
    procedure SetReview(const AReview: string);
    function GetRating: Integer;
    procedure SetRating(const ARating: Integer);
    function GetIsPending: Boolean;
    procedure SetIsPending(const AIsPending: Boolean);
  public
    constructor Create; overload;
    constructor Create(const ACustomerReview: TCustomerReview); overload;

    property Id: Integer read GetId write SetId;
    property BookId: Integer read GetBookId write SetBookId;
    property CustomerId: Integer read GetCustomerId write SetCustomerId;
    property Review: string read GetReview write SetReview;
    property Rating: Integer read GetRating write SetRating;
    property IsPending: Boolean read GetIsPending write SetIsPending;
  end;

implementation

{ ICustomerReviewContext }

constructor TCustomerReviewActiveRecord.Create(
  const ACustomerReview: TCustomerReview);
begin
  inherited Create(True);

  Id := ACustomerReview.Id;
  BookId := ACustomerReview.BookId;
  CustomerId := ACustomerReview.CustomerId;
  Review := ACustomerReview.Review;
  Rating := ACustomerReview.Rating;
  IsPending := ACustomerReview.IsPending;
end;

constructor TCustomerReviewActiveRecord.Create;
begin
  inherited Create(True);
end;

function TCustomerReviewActiveRecord.GetBookId: Integer;
begin
  Result := FBookId;
end;

function TCustomerReviewActiveRecord.GetCustomerId: Integer;
begin
  Result := FCustomerId;
end;

function TCustomerReviewActiveRecord.GetId: Integer;
begin
  Result := FId;
end;

function TCustomerReviewActiveRecord.GetIsPending: Boolean;
begin
  Result := FIsPending;
end;

function TCustomerReviewActiveRecord.GetRating: Integer;
begin
  Result := FRating;
end;

function TCustomerReviewActiveRecord.GetReview: string;
begin
  Result := FReview;
end;

procedure TCustomerReviewActiveRecord.SetBookId(const ABookId: Integer);
begin
  FBookId := ABookId;
end;

procedure TCustomerReviewActiveRecord.SetCustomerId(const ACustomerId: Integer);
begin
  FCustomerId := ACustomerId;
end;

procedure TCustomerReviewActiveRecord.SetId(const AId: Integer);
begin
  FId := AId;
end;

procedure TCustomerReviewActiveRecord.SetIsPending(const AIsPending: Boolean);
begin
  FIsPending := AIsPending;
end;

procedure TCustomerReviewActiveRecord.SetRating(const ARating: Integer);
begin
  FRating := ARating;
end;

procedure TCustomerReviewActiveRecord.SetReview(const AReview: string);
begin
  FReview := AReview;
end;

end.
