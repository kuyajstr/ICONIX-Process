unit BookDetailsPresenter;

interface

uses
  PresenterIntf,
  ViewIntf,
  Book,
  BookDetailsView,
  BookDetailsRestService;

type
  TBookDetailsPresenter = class(TinterfacedObject, IBookDetailsPresenter)
  private
    FBook: TBook;
    FView: IBookDetailsView;
    FRestService: IBookDetailsRestService;
  public
    constructor Create(AView: IBookDetailsView; ABook: TBook;
      ARestService: IBookDetailsRestService);
    procedure ComposeReview;
    procedure DisplayView;
    function IsUserAuthorized: Boolean;
  end;

implementation

uses
  WriteReviewPresenter,
  WriteReviewView,
  AuthService,
  SysUtils,
  LoginPresenter,
  LoginView,
  Vcl.Forms,
  Vcl.Dialogs,
  Vcl.Controls,
  LoginRestService,
  WriteReviewRestService;

{ TBookDetailsController }

//procedure TBookDetailsPresenter.ComposeReview;
//begin
//  if not IsUserAuthorized then
//    Exit;
//
//  var WriteReviewView := TWriteReviewForm.Create(FView as TForm);
//  var WriteReviewRestService := TWriteReviewRestService.Create;
//  var WriteReviewPresenter := TWriteReviewPresenter.Create(WriteReviewView,
//    FBook, WriteReviewRestService);
//  WriteReviewPresenter.DisplayView;
//end;
//
//constructor TBookDetailsPresenter.Create(AView: IBookDetailsView; ABook: TBook;
//  ARestService: IBookDetailsRestService);
//begin
//  inherited Create;
//  FRestService := ARestService;
//  FBook := ABook;
//  FView := AView;
//  FView.SetPresenter(Self);
//end;
//
//procedure TBookDetailsPresenter.DisplayView;
//begin
//  FView.SetTitle(FBook.Title);
//  FView.SetSynopsis(FBook.Synopsis);
//  FView.Show;
//end;
//
//function TBookDetailsPresenter.IsUserAuthorized: Boolean;
//begin
//  FRestService.RefreshToken;
//  Result := True;
//  var IsUserAuthorized := FRestService.IsUserAuthorize;
//  if IsUserAuthorized then
//  begin
//    Result := False;
//    if MessageDlg('Please Login first, would you like to proceed?',
//      mtConfirmation, [mbYes, mbNo], 0) = mrYes then
//    begin
//      var LoginView := TLoginForm.Create(FView as TForm);
//      var LoginService := TLoginRestService.Create;
//      var LoginPresenter := TLoginPresenter.Create(LoginView, LoginRestService);
//      LoginView.Show;
//    end;
//  end;
//end;

{ TBookDetailsPresenter }

procedure TBookDetailsPresenter.ComposeReview;
begin

end;

constructor TBookDetailsPresenter.Create(AView: IBookDetailsView; ABook: TBook;
  ARestService: IBookDetailsRestService);
begin

end;

procedure TBookDetailsPresenter.DisplayView;
begin

end;

function TBookDetailsPresenter.IsUserAuthorized: Boolean;
begin

end;

end.
