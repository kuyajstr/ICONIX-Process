unit BookController;

interface

uses
  MVCFramework,
  MVCFramework.Commons,
  MVCFramework.Serializer.Commons,
  Book;

type

  [MVCPath('/api/books')]
  TBookController = class(TMVCController)
  public
    [MVCPath]
    [MVCHTTPMethod([httpPOST])]
    [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
    procedure CreateBook();

    [MVCPath]
    [MVCHTTPMethod([httpGET])]
    [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
    procedure GetAllBooks();

    [MVCPath('/($ID)')]
    [MVCHTTPMethod([httpGET])]
    [MVCProduces(TMVCMediaType.APPLICATION_JSON)]
    procedure GetBookByID(const ID: Integer);

    [MVCPath('/($ID)')]
    [MVCHTTPMethod([httpDELETE])]
    [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
    procedure DeleteBook(const ID: Integer);

    [MVCPath('/($ID)')]
    [MVCHTTPMethod([httpPUT])]
    [MVCConsumes(TMVCMediaType.APPLICATION_JSON)]
    procedure UpdateBook(const ID: Integer);
  end;

implementation

{ TBookController }

procedure TBookController.CreateBook;
begin
  CreateEntity;
end;

procedure TBookController.DeleteBook(const ID: Integer);
begin
  DeleteEntity(ID);
end;

procedure TBookController.GetAllBooks;
begin
  Render(ObjectDict().Add('data', GetAllEntities))
end;

procedure TBookController.GetBookByID(const ID: Integer);
begin
  Render(ObjectDict().Add('data', GetEntityById(ID)));
end;

procedure TBookController.UpdateBook(const ID: Integer);
begin
  UpdateEntity(ID);
end;

end.
