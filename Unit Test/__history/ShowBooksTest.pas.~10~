unit ShowBooksTest;

interface

uses
  DUnitX.TestFramework;

type
  [TestFixture]
  TMyTestObject = class
  private

  public
    // Sample Methods
    // Simple single Test
    [Test]
    procedure GetAllBooks;
    [Test]
    procedure ShowNoBooksFound;
  end;

implementation

uses
  TestBookDao, BookService, Book, SysUtils, Generics.Collections;

{ TMyTestObject }

procedure TMyTestObject.GetAllBooks;
var
  BookList: TObjectList<TBook>;
begin
  BookList := TObjectList<TBook>.Create;

  var FMockDatabase := TDictionary<Integer, TBook>.Create;

  FMockDatabase.Add(1, TBook.Create('Book A', 'Synopsis for Book A', 1));
  FMockDatabase.Add(2, TBook.Create('Book B', 'Synopsis for Book B', 2));
  FMockDatabase.Add(3, TBook.Create('Book C', 'Synopsis for Book C', 3));

  var BookDao := TTestBookDao.Create(FMockDatabase);

  var Service := TBookService.Create(BookDao);

  Service.GetAllBooks(BookList);

  Assert.IsTrue(BookList.Count > 0);
end;

procedure TMyTestObject.ShowNoBooksFound;
var
  BookList: TObjectList<TBook>;
begin
  BookList := TObjectList<TBook>.Create;

  var FMockDatabase := TDictionary<Integer, TBook>.Create;

  var BookDao := TTestBookDao.Create(FMockDatabase);

  var Service := TBookService.Create(BookDao);

  Service.GetAllBooks(BookList);

  Assert.AreEqual(BookList.Count, 0);
end;

initialization
  TDUnitX.RegisterTestFixture(TMyTestObject);

end.
