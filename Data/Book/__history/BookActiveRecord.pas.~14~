unit BookActiveRecord;

interface

uses
  MVCFramework.ActiveRecord,
  MVCFramework.Serializer.Commons,
  MVCFramework.SQLGenerators.MySQL,
  Book, BookContextIntf, EntityActiveRecord;

type

  [MVCNameCase(ncPascalCase)]
  [MVCTable('book')]
  TBookActiveRecord = class(TEntityActiveRecord, IBookContext)
  private
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    FId: Integer;
    [MVCTableField('TITLE')]
    FTitle: string;
    [MVCTableField('SYNOPSIS')]
    FSynopsis: string;

    function GetId: Integer;
    procedure SetId(const AId: Integer);

    function GetTitle: string;
    procedure SetTitle(const ATitle: string);

    function GetSynopsis: string;
    procedure SetSynopsis(const ASynopsis: string);
  public
    constructor Create; overload;
    constructor Create(const ABook: TBook); overload;

    property Id: Integer read FId write FId;
    property Title: string read FTitle write FTitle;
    property Synopsis: string read FSynopsis write FSynopsis;
  end;

implementation

{ TBookActiveRecord }

constructor TBookActiveRecord.Create(const ABook: TBook);
begin
  inherited Create;//(True);

  Id := ABook.Id;
  Title := ABook.Title;
  Synopsis := ABook.Synopsis;
end;

constructor TBookActiveRecord.Create;
begin
  inherited Create;//(True);
end;

function TBookActiveRecord.GetId: Integer;
begin
  Result := FId;
end;

function TBookActiveRecord.GetSynopsis: string;
begin
  Result := FSynopsis;
end;

function TBookActiveRecord.GetTitle: string;
begin
  Result := FTitle;
end;

procedure TBookActiveRecord.SetId(const AId: Integer);
begin
  FId := AId;
end;

procedure TBookActiveRecord.SetSynopsis(const ASynopsis: string);
begin
  FSynopsis := ASynopsis;
end;

procedure TBookActiveRecord.SetTitle(const ATitle: string);
begin
  FTitle := ATitle;
end;

end.
