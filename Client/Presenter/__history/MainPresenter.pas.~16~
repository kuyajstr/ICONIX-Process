unit MainPresenter;

interface

uses
  PresenterIntf,
  ViewIntf,
  Generics.Collections,
  Book,
  SysUtils,
  MVCFramework.RESTClient,
  Data.Bind.ObjectScope;

type
  TMainPresenter = class(TInterfacedObject, IMainPresenter)
  private
    FView: IMainView;
    FBookList: TList<TBook>;
    FRestClient: IMVCRESTClient;
    function RetrieveBooks: TList<TBook>;
    procedure PopulateGrid(var BindSourceAdapter: TBindSourceAdapter);
  public
    constructor Create(AView: IMainView);
    procedure LoadBooks;
    procedure ShowBookDetails;
  end;

implementation

uses
  BookstoreDM,
  MVCFramework.DataSet.Utils,
  MVCFramework.Serializer.Commons,
  MainView,
  BookDetailsView,
  BookDetailsPresenter,
  AuthService,
  MVCFramework.Serializer.JsonDataObjects,
  REST.Json,
  Json,
  Vcl.Forms,
  Vcl.Dialogs;

{ TMainCOntroller }

constructor TMainPresenter.Create(AView: IMainView);
begin
  inherited Create;
  FRestClient := TMVCRESTClient.New.BaseURL('localhost', 8080);
  FRestClient.SetBasicAuthorization('Guest', 'guest');
  FView := AView;
  FView.SetPresenter(Self);

  var Response := FRestClient.Get('/api/login') as TMVCRESTResponse;
  if Response.Success then
  begin
    var Token: string := Response.ToJSONObject.Values['token'];
    var AuthService := TAuthService.GetInstance;
    AuthService.SetToken(Token);
    FRestClient.SetBearerAuthorization(AuthService.GetToken);
  end;
end;

procedure TMainPresenter.LoadBooks;
begin
//  var MemTable := FView.GetDataSourceBooks;

  FBookList := RetrieveBooks;

//  for var I := 0 to BookArray.Count - 1 do
//  begin
//    var BookJSON := BookArray.Items[I].ToString;
//    var Book := TJSON.JsonToObject<TBook>(BookJSON);
//    FBookList.Add(Book);
//  end;


//  var datastring := Data.

//  FRestClient.Async(
//    procedure(Resp: IMVCRESTResponse)
//    begin
//
//      var Data := Resp.ToJSONArray.Values['data'];
//
////      var DataJSON :=  StrToJSONObject(Resp.Content);
//
////      var Data := DataJSON.Values['data'];
////      var ResponseData := Resp.ToJSONArray.Values['data'];
////        var JSONArray :=
//
////      MemTable.Close;
////      MemTable.Open;
////      MemTable.LoadJSONArrayFromJSONObjectProperty('data', Resp.Content,
////        TMVCNameCase.ncPascalCase);
////
////      if MemTable.RecordCount <= 0 then
////        FView.ShowMessageBox('No record found');
////      MemTable.First;
//    end, nil, True).Get('/api/books');
end;


procedure TMainPresenter.PopulateGrid(
  var BindSourceAdapter: TBindSourceAdapter);
begin
  BindSourceAdapter := TListBindSourceAdapter<TBook>.Create(FView as TMainForm, FBookList, False);
//  BindSourceAdapter := TListBindSourceAdapter<TBook>.Create(FView, FBookList, False);
end;

function TMainPresenter.RetrieveBooks: TList<TBook>;
begin
  Result := TList<TBook>.Create;

  var Response := FRestClient.Get('/api/books') as TMVCRESTResponse;
  var JSONValue := TJSONObject.ParseJSONValue(Response.Content);
  var BookArray := JSONValue.GetValue<TJSONArray>('data');

  for var BookJson in BookArray do
  begin
    var Book := TJSON.JsonToObject<TBook>(BookJson.ToString);
    Result.Add(Book);
  end;
end;

procedure TMainPresenter.ShowBookDetails;
begin
  var BookDetail := TBook.Create();

//  BookDetail.Id := FView.GetBookId;
//  BookDetail.Title := FView.GetBookTitle;
//  BookDetail.Synopsis := FView.GetBookSynopsis;

  var BookDetailsView := TBookDetailsForm.Create(Application);
  var BookDetailsController := TBookDetailsPresenter.Create(BookDetailsView, BookDetail);
  BookDetailsController.DisplayView;
end;

end.
