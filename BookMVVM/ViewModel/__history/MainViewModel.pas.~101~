unit MainViewModel;

interface

uses
  Generics.Collections, Book, Vcl.ComCtrls, Classes, Bindings.Helper;

type
  TMainViewModel = class
  private
    FBookList: TList<TBook>;
    FSelectedBook: TBook;
    FItemList: TStringList ;
    procedure OnPropertyChanged(const PropertyName: string);
    function GetSelectedIndex: Integer;
    procedure SetSelectedIndex(const Value: Integer);
  public
    constructor Create;
    procedure LoadBooks;
    procedure ShowBookDetail;
    property SelectedBook: TBook read FSelectedBook write FSelectedBook;
    property ItemList: TStringList read FItemList write FItemList;
    property SelectedIndex: Integer read GetSelectedIndex write SetSelectedIndex;
  end;

implementation

uses
  Vcl.Dialogs,
  Vcl.Forms,
  BookDetailsView,
  BookDetailsViewModel,
  SysUtils,
  Utility;

{ TMainViewModel }

constructor TMainViewModel.Create;
begin
  inherited Create;

  FBookList := TList<TBook>.Create;
  FItemList := TStringList.Create;

  FBookList.Add(TBook.Create('Book A', 'Synopsis for Book A', 1));
  FBookList.Add(TBook.Create('Book B', 'Synopsis for Book B', 2));
  FBookList.Add(TBook.Create('Book C', 'Synopsis for Book C', 3));
end;

function TMainViewModel.GetSelectedIndex: Integer;
begin
  Result := FItemList.IndexOfObject(SelectedBook);
end;

procedure TMainViewModel.LoadBooks;
begin
  FItemList := TStringList.Create;
  for var BookDetails in FBookList do
    FItemList.AddObject(BookDetails.Title, BookDetails);

  if FItemList.Count > 0 then
    SelectedIndex := 0;

  OnPropertyChanged('ItemList');
end;

procedure TMainViewModel.OnPropertyChanged(const PropertyName: string);
begin
  TBindings.Notify(Self, PropertyName);
end;

procedure TMainViewModel.SetSelectedIndex(const Value: Integer);
begin
//  if FItemList.Count <> 0 then
//  begin
    SelectedBook := FItemList.Objects[Value] as TBook;
    OnPropertyChanged('SelectedBook');
//  end;
end;

procedure TMainViewModel.ShowBookDetail;
begin
  var Book := TBook.Create;
  Book.Id := FSelectedBook.Id;
  Book.Title := FSelectedBook.Title;
  Book.Synopsis := FSelectedBook.Synopsis;

  var BookDetailsVM := TBookDetailsViewModel.Create(Book);
  var BookDetailForm := TBookDetailsForm.Create(BookDetailsVM);

  BookDetailForm.Show;
end;

end.
