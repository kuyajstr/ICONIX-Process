unit AuthService;

interface

uses
  MVCFramework,
  MVCFramework.Commons,
  System.Generics.Collections;


type

TAuthCriteria = class(TInterfacedObject, IMVCAuthenticationHandler)
public
  procedure OnRequest(const AContext: TWebContext;
    const AControllerQualifiedClassName: string; const AActionName: string;
    var AAuthenticationRequired: Boolean);

  procedure OnAuthentication(const AContext: TWebContext;
    const AUserName: string; const APassword: string;
    AUserRoles:TList<string>; var AIsValid: Boolean;
    const ASessionData: TDictionary<string,string>);

  procedure OnAuthorization(const AContext: TWebContext;
    AUserRoles: TList<string>; const AControllerQualifiedClassName: string;
    const AActionName: string; var AIsAuthorized: Boolean);
end;

implementation

uses
  System.SysUtils,
  System.StrUtils,
  FireDAC.Comp.Client,
  MVCFramework.ActiveRecord,
  SecurityService,
  Entity;

{ TAuthCriteria }

procedure TAuthCriteria.OnAuthentication(const AContext: TWebContext;
  const AUserName, APassword: string; AUserRoles: TList<string>;
  var AIsValid: Boolean; const ASessionData: TDictionary<string, string>);
var
  SqlStr : String;
  lUser : TUser;

begin
  SqlStr := 'EMAIL = ? and NOT DELETED';
  lUser := TMVCActiveRecord.GetOneByWhere<TUser>(SqlStr,[AUserName],False);
  try
    if not Assigned(lUser) then
        Exit;

    AIsValid := CheckPassword(APassword, lUser.Password);

    lUser.LastLogIn := Now;
    lUser.Update();

    if not AIsValid then
      Exit
    else
      if AUserName.EndsWith('@library.com', True) then
        AUserRoles.Add('employee')
      else
        AUserRoles.Add('guest')
  finally
    lUser.Free;
  end;
end;

procedure TAuthCriteria.OnAuthorization(const AContext: TWebContext;
  AUserRoles: TList<string>; const AControllerQualifiedClassName,
  AActionName: string; var AIsAuthorized: Boolean);
begin
  AIsAuthorized := False;
  if AUserRoles.Contains('employee') then
    AIsAuthorized := True
  else
  begin
       /// <summary>
       ///   prevent user from access the CRUD functions for User module
       ///   other than changing it password and limiting it to
       ///   retrieving only when using other module
       /// </summary>
    if AControllerQualifiedClassName = 'UsersController.TUsersController' then
      AIsAuthorized := AActionName = 'ChangeCurrentUserPassword'
    else
      AIsAuthorized := AContext.Request.HTTPMethodAsString = 'GET';
  end;

{$REGION 'Previous Version of Code'}
//    AIsAuthorized :=
//      MatchStr(AContext.Request.HTTPMethodAsString, ['GET', 'PUT'])
//
//    AIsAuthorized := (AContext.Request.HTTPMethodAsString = 'GET');
{$ENDREGION}

end;

procedure TAuthCriteria.OnRequest(const AContext: TWebContext;
  const AControllerQualifiedClassName, AActionName: string;
  var AAuthenticationRequired: Boolean);
begin
  AAuthenticationRequired := True; //Set to false to ignore authentication
end;

end.
